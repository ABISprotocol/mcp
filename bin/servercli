#!/usr/bin/env node

var fs = require('fs');
var program = require('commander');
var rpc = require('../jrpcClient');
var Address = require('bitcore/Address');

var VERSION = '0.0.1';

program
	.version(VERSION)
	.option('--host <hostname>', 'Remote hostname of server to contact')
	.option('--port <n>', 'Remote port of server to contact')
	.parse(process.argv);

var rpc_opts = {
	hostname: program.host || 'localhost',
	port: program.port || 12882,
};

function list_commands()
{
	var s = "servercli command summary:\n";
	s += "open\t\tOpen channel\n";
	s += "setRefund CHANNEL-ID TX\tSet hex-encoded refund transaction\n";
	s += "commit CHANNEL-ID TX\tCommit funds to channel\n";
	s += "setPayment CHANNEL-ID TX\tSet hex-encoded payment transaction template\n";
	s += "pay CHANNEL-ID SIGNATURE AMOUNT\tMake a payment\n";
	console.log(s);
}

function cmd_open()
{
	rpc.call('channel.open', [{}], rpc_opts, function(err, result) {
		if (err)
			console.log("channel.open failed: " + err.message);
		else
			console.dir(result);
	});
}

function cmd_setRefund(channelId, tx)
{
	rpc.call('channel.setRefund', [{ "channel.id": channelId, tx: tx }], rpc_opts, function(err, result) {
		if (err)
			console.log("channel.setRefund failed: " + err.message);
		else
			console.dir(result);
	});
}

function cmd_commit(channelId, tx)
{
	rpc.call('channel.commit', [{ "channel.id": channelId, tx: tx }], rpc_opts, function(err, result) {
		if (err)
			console.log("channel.commit failed: " + err.message);
		else
			console.dir(result);
	});
}

function cmd_setPayment(channelId, tx)
{
	rpc.call('channel.setPayment', [{ "channel.id": channelId, tx: tx }], rpc_opts, function(err, result) {
		if (err)
			console.log("channel.setPayment failed: " + err.message);
		else
			console.dir(result);
	});
}

function cmd_pay(channelId, signature, amount)
{
	rpc.call('channel.pay', [{
		"channel.id": channelId,
		signature: signature,
		amount: amount,
		}], rpc_opts, function(err, result) {
		if (err)
			console.log("channel.pay failed: " + err.message);
		else
			console.dir(result);
	});
}

function main()
{
	if (program.args.length == 0) {
		console.error("No command specified.");
		list_commands();
		return;
	}

	var cmd = program.args[0];
	
	switch (cmd) {

	default:
		console.error("Unknown command", cmd);
		// fall through

	case "open":
		cmd_open();
		break;

	case "setRefund":
		if (program.args.length != 3)
			throw new Error("Usage: setRefund channel-id tx");
		cmd_setRefund(program.args[1], program.args[2]);
		break;

	case "commit":
		if (program.args.length != 3)
			throw new Error("Usage: commit channel-id tx");
		cmd_commit(program.args[1], program.args[2]);
		break;

	case "setPayment":
		if (program.args.length != 3)
			throw new Error("Usage: setPayment channel-id tx");
		cmd_setPayment(program.args[1], program.args[2]);
		break;

	case "pay":
		if (program.args.length != 4)
			throw new Error("Usage: pay channel-id signature amount");
		cmd_pay(program.args[1], program.args[2], program.args[3]);
		break;

	case "help":
		list_commands();
		return;
	}
}

main();


