#!/usr/bin/env node

var fs = require('fs');
var program = require('commander');
var EncFile = require('bitcore/util/EncFile');
var timeUtil = require('bitcore/util/time');
var coinUtil = require('bitcore/util/util');
var Transaction = require('bitcore/Transaction');
var Parser = require('bitcore/util/BinaryParser');
var jrpcServer = require('../jrpcServer');
var kvfile = require('../kvfile');
var winston = require('winston');
var RpcClient = require('bitcore/RpcClient');
var Script = require('bitcore/Script');
var Address = require('bitcore/Address');

var VERSION = '0.0.1';
var ENC_METHOD = 'aes-256-cbc';

program
	.version(VERSION)
	.option('--init', 'Initialize database')
	.option('-c, --config <file>', 'key=value configuration file')
	.parse(process.argv);

var logger = new (winston.Logger)({
	transports: [
		new (winston.transports.Console)({ timestamp: true }),
	],
});
var cfg_fn = program.config || 'serverd.cfg';
var cfg = kvfile.readSync(cfg_fn);
if (cfg.log)
	logger.add(winston.transports.File, { 
		filename: cfg.log,
		timestamps: true,
	});

var db_fn = cfg.db || 'serverd.db';
var sslkey_fn = cfg.ssl_key || 'server.key';
var sslcert_fn = cfg.ssl_cert || 'server.cert';

var httpsrv = undefined;
var admsrv = undefined;
var db = undefined;
var rpc = undefined;

function stop_all()
{
	if (httpsrv)
		httpsrv.close();
	if (admsrv)
		admsrv.close();
}

function dbWriteSync()
{
	var tmpFn = db_fn + ".tmp";
	EncFile.writeJFileSync(ENC_METHOD, process.env.SERVERD, tmpFn, db);
	fs.renameSync(tmpFn, db_fn);
}

function cmdChannelOpen(req)
{
	return jrpcServer.err(req, -99, 'not implemented yet');
}

function cmdChannelSetRefund(req)
{
	var params = req.params[0];
	if (!('channel.id' in params) ||
	    !('tx' in params))
		return jrpcServer.err(req, -10, 'missing params');

	return jrpcServer.err(req, -99, 'not implemented yet');
}

function cmdChannelCommit(req)
{
	var params = req.params[0];
	if (!('channel.id' in params) ||
	    !('tx' in params))
		return jrpcServer.err(req, -10, 'missing params');

	return jrpcServer.err(req, -99, 'not implemented yet');
}

function cmdChannelSetPayment(req)
{
	var params = req.params[0];
	if (!('channel.id' in params) ||
	    !('tx' in params))
		return jrpcServer.err(req, -10, 'missing params');

	return jrpcServer.err(req, -99, 'not implemented yet');
}

function cmdChannelPay(req)
{
	var params = req.params[0];
	if (!('channel.id' in params) ||
	    !('signature' in params) ||
	    !('amount' in params))
		return jrpcServer.err(req, -10, 'missing params');

	return jrpcServer.err(req, -99, 'not implemented yet');
}

function handle_jsonrpc(req)
{
	if (!Array.isArray(req.params) ||
	    (req.params.length != 1) ||
	    (typeof req.params[0] != 'object'))
		return jrpcServer.err(req, -2, 'invalid params');

	switch (req.method) {
	case "channel.open":
		return cmdChannelOpen(req);
	case "channel.setRefund":
		return cmdChannelSetRefund(req);
	case "channel.commit":
		return cmdChannelCommit(req);
	case "channel.setPayment":
		return cmdChannelSetPayment(req);
	case "channel.pay":
		return cmdChannelPay(req);

	default:
		return jrpcServer.err(req, -1, 'method not found');
	}
}

function handle_jsonrpc_admin(req)
{
	switch (req.method) {
	case "dump":
		return jrpcServer.ok(req, db);

	case "stop":
		stop_all();
		return jrpcServer.ok(req, true);
	
	default:
		return jrpcServer.err(req, -1, 'method not found');
	}
}

function start_http()
{
	var opts = {
		key: fs.readFileSync(sslkey_fn),
		cert: fs.readFileSync(sslcert_fn),
		port: cfg.port || 12882,
	};
	httpsrv = jrpcServer.create(opts, handle_jsonrpc, logger, "http");

	opts = {
		key: fs.readFileSync(sslkey_fn),
		cert: fs.readFileSync(sslcert_fn),
		port: cfg.admin_port || 12883,
	};
	admsrv = jrpcServer.create(opts, handle_jsonrpc_admin, logger, "admin");

	rpc = new RpcClient({
		host: cfg.bitcoind_host || '127.0.0.1',
		port: cfg.bitcoind_port || 18332,
		user: cfg.bitcoind_user || 'user',
		pass: cfg.bitcoind_pass || 'pass',
		protocol: cfg.bitcoind_protocol || 'http',
	});
}

function read_db()
{
	if (program.init) {
		db = {
			created: {
				app:		'serverd',
				version:	VERSION,
				time:		timeUtil.curtime(),
			},
		};

		dbWriteSync();
	} else
		db = EncFile.readJFileSync(ENC_METHOD, process.env.SERVERD, db_fn);
}

function main()
{
	if (!process.env.SERVERD) {
		console.error("SERVERD environment variable must be set to DB passphrase");
		return;
	}

	read_db();

	if (!program.init) {
		start_http();
	}
}

main();

